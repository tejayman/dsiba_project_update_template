)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:nrow(new_data),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = round(predicted_probs_new * 100, 2)
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities for the Six Profiles") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "150px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "150px") %>%
scroll_box(width = "100%", height = "400px")
probability_table <- tibble(
Reference = 1:length(predicted_probs),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:nrow(new_data),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = round(predicted_probs_new * 100, 2)
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities for the Six Profiles") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "150px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "150px") %>%
scroll_box(width = "100%", height = "400px")
probability_table <- tibble(
Reference = 1:length(predicted_probs),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:nrow(new_data),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = round(predicted_probs_new * 100, 2)
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities for the Six Profiles") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "150px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "150px") %>%
scroll_box(width = "100%", height = "400px")
probability_table <- tibble(
Reference = 1:length(predicted_probs),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:nrow(new_data),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = round(predicted_probs_new * 100, 2)
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities for the Six Profiles") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE, width = "150px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "150px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:length(predicted_probs),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:length(predicted_probs_new),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:length(predicted_probs_new),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = predicted_probs_new * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:length(predicted_probs_new),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = predicted_probs_new * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
probability_table <- tibble(
Reference = 1:length(predicted_probs),
Predicted_Probability = predicted_probs,
Probability_Percentage = predicted_probs * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
stepwise_summary <- summary(stepwise_model)
stepwise_coef_table <- coef(stepwise_summary) %>%
as.data.frame() %>%
tibble::rownames_to_column("Predictor")
stepwise_coef_table %>%
kable(format = "html", caption = "Coefficients of the Stepwise Logistic Regression Model") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
str_output <- capture.output(str(dataset))
str_table <- data.frame(Structure = str_output, stringsAsFactors = FALSE)
str_table %>%
kbl(format = "html", caption = "Original structure of the Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f0f0f0") %>%
scroll_box(width = "100%", height = "400px")
dataset <- dataset %>%
mutate(
gender = as.factor(gender),
family_hist = as.factor(family_hist),
caloric_food = as.factor(caloric_food),
smoke = as.factor(smoke),
calorie_check = as.factor(calorie_check),
m_trans = as.factor(m_trans),
obesity_lev = factor(obesity_lev,
levels = c("Insufficient_Weight", "Normal_Weight",
"Overweight_Level_I", "Overweight_Level_II",
"Obesity_Type_I", "Obesity_Type_II", "Obesity_Type_III"),
ordered = TRUE),
food_btw_meals = factor(ifelse(food_btw_meals == "no", "No", food_btw_meals),
levels = c("No", "Sometimes", "Frequently", "Always"),
ordered = TRUE),
freq_alcohol = factor(ifelse(freq_alcohol == "no", "No", freq_alcohol),
levels = c("No", "Sometimes", "Frequently", "Always"),
ordered = TRUE))
str_output <- capture.output(str(dataset))
str_table <- data.frame(Structure = str_output, stringsAsFactors = FALSE)
str_table %>%
kbl(format = "html", caption = "Manipulated Dataset Structure") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
dataset_num <- dataset %>%
mutate(obesity_lev = recode(obesity_lev,
"Insufficient_Weight"=1,
"Normal_Weight" = 2,
"Overweight_Level_I" = 3,
"Overweight_Level_II" = 4,
"Obesity_Type_I" = 5,
"Obesity_Type_II" = 6,
"Obesity_Type_III" = 7,
))
dataset_num <- dataset %>%
mutate(freq_alcohol = recode(freq_alcohol,
"No"=1,
"Sometimes"=2,
"Frequently" =3,
"Always"  =4
))
dataset_num <- dataset %>%
mutate(m_trans = recode(m_trans,
"Automobile"=1,
"Bike"=2,
"Motorbike"=3,
"Public_Transportation"=4,
"Walking"=5,
))
dataset_num <- dataset %>%
mutate(food_btw_meals = recode(food_btw_meals,
"No"=0,
"Sometimes"=1 ,
"Frequently"=2,
"Always"=3
)
)
dataset_num <- dataset_num%>%
mutate(calorie_check = recode(calorie_check,
"no"=0,
"yes"=1 ,
))
dataset_num <- dataset_num %>%
mutate(across(where(is.factor), ~ as.numeric(.)))
str_output <- capture.output(str(dataset_num))
table_num_str <- data.frame(Structure = str_output, stringsAsFactors = FALSE)
table_num_str %>%
kbl(format = "html", caption = "Structure of the Numerical Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
nb_na<- colSums(is.na(dataset_num))
nb_na %>%
kbl(format = "html", caption = "Presence of Potential NA Values in the Dataset") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "left"
) %>%
column_spec(1, width = "100px") %>%
column_spec(2, width = "80px") %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
library(here)
library(knitr)
# Main features of the dataset
dataset_raw <- read.csv(here("data/raw/dataset_raw.csv"))
head(dataset_raw) %>%
kbl(format = "html", caption = "First 6 Rows of the Raw Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f0f0f0") %>%
scroll_box(width = "100%", height = "400px")
val_meaning <- c("Indicates the gender of the individual (Male/Female).", "Represents the age of participants in years.", "The height of individuals in meters.", "The weight of participants in kilograms.", "Indicates whether a family member has suffered from overweight (Yes/No).", "Indicates if participants frequently consume high-caloric foods (Yes/No).", "Scaled from 1 to 3, reflects how often vegetables are consumed (1 = Never, 3 = Always).", "Indicates the typical number of main meals consumed daily.", "Describes how often participants eat between meals (e.g., No, Sometimes, Frequently, Always).", "Indicates whether participants smoke (Yes/No).", "Scaled from 1 to 3, reflecting daily water intake (1 = Less than 1 liter, 3 = More than 2 liters).", "Whether participants monitor their calorie intake (Yes/No).", "Scaled from 0 to 4, indicating days of physical activity per week (0 = None, 4 = 4-5 days).", "Reflects daily time spent on technological devices, in hours.", "Indicates the frequency of alcohol consumption (e.g., I don't drink, Sometimes, Frequently, Always).", "Describes the primary mode of transportation (e.g., Walking, Public Transportation, Automobile).", "The target variable, classifying obesity levels into categories such as Normal Weight, Overweight (Levels I and II), and Obesity (Types I, II, III).")
desc_table <- tibble::tibble(Name = colnames(dataset_raw), Type = sapply(dataset_raw, class), Meaning = val_meaning)
desc_table %>%
kbl(format = "html", caption = "Variable Descriptions") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f0f0f0") %>%
column_spec(1, bold = TRUE, width = "200px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "500px") %>%
scroll_box(width = "100%", height = "500px")
##########################################################
## The following uses renv to help with reproducibility ##
##########################################################
# Uncomment the codes in this section if you would like to use it with your
# Check if renv is installed and load it
# if (!require("renv", character.only = TRUE)) {
#   install.packages("renv")
#   library("renv", character.only = TRUE)
# }
# Initialize renv and restore packages from the lockfile
# renv::init()
# renv::restore()
#############################################
## The following loads the needed packages ##
#############################################
# load your virtual environment for the project
# load the required packages
packages <- c(
"here", # for the project's organization
"readr","dplyr","tidyr","ggplot2","corrplot","ggridges","cluster","reshape2",
"tidyverse", "lubridate","knitr", # for wrangling
"patchwork", "maps", "scales","plotly","caret","pROC", # for plotting
"knitr", "kableExtra", "rmarkdown","Metrics" # for the report
# "reticulate", # for using python
)
# Install missing packages and load all the required libraries
load_packages <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
try(install.packages(pkg))
}
require(pkg, character.only = TRUE)
}
# Load all packages
invisible(sapply(packages, load_packages))
########################################
## The following sets the python path ##
########################################
# reticulate::use_condaenv("NAME_OF_YOUR_ENVIRONMENT")
######################################################
## The following sets a few option for nice reports ##
######################################################
# You can use this if you wanted to change the rendered output
# general options
# options(
#   digits = 3,
#   str = strOptions(strict.width = "cut"),
#   width = 69,
#   tibble.width = 69,
#   cli.unicode = FALSE
# )
# ggplot options for the report
ggplot2::theme_set(theme_light())
# knitr options
# opts_chunk$set(
#   comment = "#>",
#   collapse = TRUE,
#   # cache = TRUE,
#   fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
#   dpi = 300,
#   out.width = "70%",
#   fig.align = "center",
#   fig.width = 6,
#   fig.asp = 0.618,
#   fig.show = "hold",
#   message = FALSE,
#   echo = FALSE
# )
#Assuming dataset_num is already defined and contains the relevant columns
cor_matrix <- cor(dataset_num %>% select("physical_act", "freq_alcohol", "obesity_lev", "age", "weight","height", "family_hist", "caloric_food", "vegetable_food", "food_btw_meals", "use_tech", "ch2o", "m_trans", "smoke","nb_meal_day", "calorie_check", "gender"),use = "complete.obs")
#Extract the correlations with 'obesity_lev'
cor_with_obesity_lev <- cor_matrix["obesity_lev",]
#Order variables by their correlation with 'obesity_lev'
ordered_vars <- names(sort(cor_with_obesity_lev, decreasing = TRUE))
#Reorder the correlation matrix based on this order
cor_matrix_ordered <- cor_matrix[ordered_vars, ordered_vars]
#Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
g3 <- ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5, hjust = 0.5) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, vjust = 1))
plot3 <- ggplotly(g3)
plot3
# Create the heatmap with correlation values
# Assuming dataset_num is already defined and contains the relevant columns
cor_matrix <- cor(dataset_num %>% select("physical_act", "freq_alcohol", "obesity_lev", "age", "weight", "family_hist", "caloric_food", "vegetable_food", "food_btw_meals", "use_tech","ch2o", "height", "calorie_check", "gender"), use = "complete.obs")
# Extract the correlations with "obesity_lev"
cor_with_obesity_lev <- cor_matrix["obesity_lev",]
# Order variables by their correlation with 'obesity_lev'
ordered_vars <- names(sort(cor_with_obesity_lev, decreasing = TRUE))
# Reorder the correlation matrix based on this order
cor_matrix_ordered <- cor_matrix[ordered_vars, ordered_vars]
# Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
g4 <- ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5
, hjust = 0.5) + # Center text within tiles
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, vjust = 1)
)
plot4 <- ggplotly(g4)
plot4

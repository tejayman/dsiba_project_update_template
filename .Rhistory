#Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5, hjust = 0.5) + # Center text within tiles
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
# Rotate x-axis labels for readability
axis.text.y = element_text(angle = 45, vjust = 1)
# Rotate y-axis labels for readability
)
# Install missing packages and load all the required libraries
load_packages <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
try(install.packages(pkg))
}
require(pkg, character.only = TRUE)
}
##########################################################
## The following uses renv to help with reproducibility ##
##########################################################
# Uncomment the codes in this section if you would like to use it with your
# Check if renv is installed and load it
# if (!require("renv", character.only = TRUE)) {
#   install.packages("renv")
#   library("renv", character.only = TRUE)
# }
# Initialize renv and restore packages from the lockfile
# renv::init()
# renv::restore()
#############################################
## The following loads the needed packages ##
#############################################
# load your virtual environment for the project
# load the required packages
packages <- c(
"here", # for the project's organization
"readr","dplyr","tidyr","ggplot2","corrplot","ggridges","cluster","reshape2",
"tidyverse", "lubridate", # for wrangling
"patchwork", "maps", "scales", # for plotting
"knitr", "kableExtra", "rmarkdown" # for the report
# "reticulate", # for using python
)
# Install missing packages and load all the required libraries
load_packages <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
try(install.packages(pkg))
}
require(pkg, character.only = TRUE)
}
# Load all packages
invisible(sapply(packages, load_packages))
########################################
## The following sets the python path ##
########################################
# reticulate::use_condaenv("NAME_OF_YOUR_ENVIRONMENT")
######################################################
## The following sets a few option for nice reports ##
######################################################
# You can use this if you wanted to change the rendered output
# general options
# options(
#   digits = 3,
#   str = strOptions(strict.width = "cut"),
#   width = 69,
#   tibble.width = 69,
#   cli.unicode = FALSE
# )
# ggplot options for the report
ggplot2::theme_set(theme_light())
# knitr options
# opts_chunk$set(
#   comment = "#>",
#   collapse = TRUE,
#   # cache = TRUE,
#   fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
#   dpi = 300,
#   out.width = "70%",
#   fig.align = "center",
#   fig.width = 6,
#   fig.asp = 0.618,
#   fig.show = "hold",
#   message = FALSE,
#   echo = FALSE
# )
library(here)
dataset <- read.csv(here("data/raw/dataset.csv"))
head(dataset)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(ggridges)
library(cluster)
library(reshape2)
dataset <- dataset %>%
rename(family_hist = family_history_with_overweight,
obesity_lev = NObeyesdad,
caloric_food = FAVC,
vegetable_food = FCVC,
nb_meal_day = NCP,
food_btw_meals = CAEC,
ch2o = CH2O,
smoke = SMOKE,
calorie_check = SCC,
physical_act = FAF,
freq_alcohol = CALC,
use_tech = TUE,
m_trans = MTRANS,
gender = Gender,
age = Age,
weight = Weight,
height = Height)
missing_values <- colSums(is.na(dataset))
missing_values
str(dataset)
#Convert Gender to factor with levels 0 for Female and 1 for Male
dataset$gender <- as.factor(dataset$gender)
#Convert family_hist, caloric_food, smoke, calorie_check to factor with levels 0 for No and 1 for Yes
dataset$family_hist <- as.factor(dataset$family_hist)
dataset$caloric_food <- as.factor(dataset$caloric_food)
dataset$smoke <- as.factor(dataset$smoke)
dataset$calorie_check <- as.factor(dataset$calorie_check)
#Convert other categorical variables to factors as before
dataset$m_trans <- as.factor(dataset$m_trans)
#Convert "obesity_lev", "food_btw_meals" and "freq_alcohol" to an ordinal factor with the correct levels
dataset$obesity_lev <- factor(dataset$obesity_lev, levels = c("Insufficient_Weight", "Normal_Weight", "Overweight_Level_I", "Overweight_Level_II", "Obesity_Type_I", "Obesity_Type_II", "Obesity_Type_III"), ordered = TRUE)
dataset$food_btw_meals <- factor(dataset$food_btw_meals, levels = c("No", "Sometimes", "Frequently", "Always"),  ordered = TRUE)
#We standardize "no" to "No" to avoid NA instead of no
dataset$freq_alcohol[dataset$freq_alcohol == "no"] <- "No"
#Now we convert it to an ordinal factor with the correct levels
dataset$freq_alcohol <- factor(dataset$freq_alcohol, levels = c("No", "Sometimes", "Frequently", "Always"), ordered = TRUE)
str(dataset)
duplicated_rows <- sum(duplicated(dataset))
duplicated_rows
dataset_cleaned <- dataset %>% distinct()
nrow(dataset_cleaned)
any(duplicated(dataset_cleaned))
dataset <- dataset_cleaned
rm(dataset_cleaned)
ggplot(dataset, aes(x = obesity_lev)) +
geom_bar(fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Class Distribution of Obesity Levels")
table(dataset$obesity_lev)
ggplot(dataset, aes(x = age, fill = obesity_lev)) +
geom_density(alpha = 0.5) +
theme_minimal() +
ggtitle("Age Distribution by Obesity Levels")
dataset %>%
group_by(obesity_lev) %>%
summarize(
Age_Mean = mean(age, na.rm = TRUE),
Age_SD = sd(age, na.rm = TRUE),
Height_Mean = mean(height, na.rm = TRUE),
Height_SD = sd(height, na.rm = TRUE),
Weight_Mean = mean(weight, na.rm = TRUE),
Weight_SD = sd(weight, na.rm = TRUE)
)
library(cluster)
set.seed(123)
kmeans_res <- kmeans(select(dataset, where(is.numeric)), centers = length(unique(dataset$obesity_lev)))
silhouette_score <- silhouette(kmeans_res$cluster, dist(select(dataset, where(is.numeric))))
mean_silhouette_score <- mean(silhouette_score[, "sil_width"])
mean_silhouette_score
#Change of obesity level variable character to numeric
dataset_num <- dataset%>%
mutate(obesity_lev = recode(obesity_lev, "Insufficient_Weight"=1, "Normal_Weight" = 2, "Overweight_Level_I" = 3, "Overweight_Level_II" = 4, "Obesity_Type_I" = 5, "Obesity_Type_II" = 6, "Obesity_Type_III" = 7,))
str(dataset_num$obesity_lev)
dataset_num <- dataset_num%>%
mutate(freq_alcohol = recode(freq_alcohol,"no"=1, "Sometimes"=2, "Frequently" =3, "Always"  =4 ))
dataset_num <- dataset_num%>%
mutate(m_trans = recode(m_trans, "Automobile"=1, "Bike"=2, "Motorbike"=3, "Public_Transportation"=4, "Walking"=5, ))
dataset_num <- dataset_num%>%
mutate(food_btw_meals = recode(food_btw_meals, "no"=0, "Sometimes"=1 , "Frequently"=2, "Always"=3))
dataset_num <- dataset_num%>%
mutate(calorie_check = recode(calorie_check, "no"=0, "yes"=1 , ))
dataset_num <- dataset_num %>%
mutate(across(where(is.factor), ~ as.numeric(.)))
str(dataset_num)
head(dataset_num)
#Create the heatmap with correlation values
#Assuming dataset_num is already defined and contains the relevant columns
cor_matrix <- cor(dataset_num %>%
select("physical_act", "freq_alcohol", "obesity_lev", "age", "weight","height", "family_hist", "caloric_food", "vegetable_food", "food_btw_meals", "use_tech", "ch2o", "m_trans", "smoke","nb_meal_day", "calorie_check", "gender"), use = "complete.obs")
#Extract the correlations with 'obesity_lev'
cor_with_obesity_lev <- cor_matrix["obesity_lev",]
#Order variables by their correlation with 'obesity_lev'
ordered_vars <- names(sort(cor_with_obesity_lev, decreasing = TRUE))
#Reorder the correlation matrix based on this order
cor_matrix_ordered <- cor_matrix[ordered_vars, ordered_vars]
#Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5, hjust = 0.5) + # Center text within tiles
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
# Rotate x-axis labels for readability
axis.text.y = element_text(angle = 45, vjust = 1)
# Rotate y-axis labels for readability
)
summary(dataset$age)
sd(dataset$age, na.rm = TRUE)
ggplot(dataset, aes(x = age)) +
geom_histogram(bins = 20, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution", x = "Age", y = "Count")+
theme_minimal()
ggplot(dataset, aes(x = age, fill = obesity_lev)) +
geom_histogram(bins = 20, color = "black", alpha = 0.6) +
facet_wrap(~ obesity_lev) +
ggtitle("Distribution of Age by Obesity Level") +
labs(x = "Age", y = "Count") +
theme_minimal()
ggplot(dataset, aes(x = obesity_lev, y = age, fill = obesity_lev)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, color = "black", fill = "white") +
labs(title = "Age Distribution by Obesity Level", x = "Obesity Level", y = "Age") +
theme_minimal()
ggplot(dataset, aes(x = age, y = as.numeric(obesity_lev))) +
geom_jitter(alpha = 0.3) +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(title = "Trend of Obesity Level with Age", x = "Age", y = "Obesity Level") +
theme_minimal()
summary(dataset$height)
sd(dataset$height, na.rm = TRUE)
ggplot(dataset, aes(x = height)) +
geom_histogram(bins = 20, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Height Distribution", x = "Height (m)", y = "Count") +
theme_minimal()
ggplot(dataset, aes(x = height, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Height by Gender", x = "Height", y = "Density") +
scale_fill_manual(values = c("pink", "lightblue"), name = "Gender", labels = c("Female", "Male")) +
theme_minimal()
ggplot(dataset, aes(x = obesity_lev, y = height, fill = obesity_lev)) +
geom_boxplot(alpha = 0.6) +
labs(title = "Height Distribution by Obesity Level", x = "Obesity Level", y = "Height") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
summary(dataset$weight)
sd(dataset$weight, na.rm = TRUE)
ggplot(dataset, aes(x = weight, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Weight by Gender", x = "Weight", y = "Density") +
scale_fill_manual(values = c("pink", "lightblue"), name = "Gender", labels = c("Female", "Male")) +
theme_minimal()
ggplot(dataset, aes(x = weight, y = obesity_lev, fill = obesity_lev)) +
geom_density_ridges(scale = 0.9, alpha = 0.6) +
labs(title = "Ridgeline Plot of Weight by Obesity Level", x = "Weight", y = "Obesity Level") +
theme_minimal() +
theme(legend.position = "none")
ggplot(dataset, aes(x = height, y = weight, color = obesity_lev)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, aes(group = obesity_lev)) +  # Adds a trend line for each obesity level
ggtitle("Scatter Plot of Weight vs Height by Obesity Level") +
theme_minimal() +
labs(x = "Height", y = "Weight", color = "Obesity Level")
ggplot(dataset, aes(x = height, y = weight)) +
geom_point(alpha = 0.7, aes(color = obesity_lev)) +
facet_wrap(~ obesity_lev) +
ggtitle("Facet Grid of Weight and Height by Obesity Level") +
theme_minimal() +
labs(x = "Height", y = "Weight", color = "Obesity Level") +
theme(legend.position = "none")
correlation_height_weight <- cor(dataset$height, dataset$weight, use = "complete.obs")
correlation_height_weight
eda_categorical <- function(data, variable, gender_var = "gender", obesity_var = "obesity_lev") {
cat("\n--- EDA for Categorical Variable:", variable, "---\n")
# Frequency and Proportion Tables
cat("\nFrequency Table:\n")
freq_table <- table(data[[variable]])
print(freq_table)
cat("\nProportion Table (Rounded):\n")
prop_table <- round(prop.table(freq_table), 2)
print(prop_table)
# Bar Chart with Counts (distribution)
p1 <- ggplot(data, aes(x = .data[[variable]])) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Distribution of", variable, "- Counts")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Count")
print(p1)
# Distribution by Gender
p2 <- ggplot(data, aes(x = .data[[variable]], fill = .data[[gender_var]])) +
geom_bar(position = "dodge", color = "black") +
ggtitle(paste("Distribution of", variable, "by Gender")) +
labs(fill = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Count")
print(p2)
# Dodged Bar Chart for Categorical Variable by Obesity Levels
p3 <- ggplot(data, aes(x = .data[[variable]], fill = .data[[obesity_var]])) +
geom_bar(position = "dodge", color = "black") +
ggtitle(paste("Dodged Bar Chart of", variable, "by", obesity_var)) +
labs(y = "Count", fill = obesity_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p3)
# Stacked Bar Chart of Food Between Meals by Obesity Level (Proportions within each Obesity Level)
p4 <- ggplot(data, aes(x = .data[[obesity_var]], fill = .data[[variable]])) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent) +
ggtitle(paste("Stacked Bar Chart of", variable, "by", obesity_var, "- Proportions within each Obesity Level")) +
labs(x = obesity_var, y = "Proportion", fill = variable) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p4)
}
#Food between meals (snacking)
eda_categorical(dataset, "food_btw_meals", gender_var = "gender", obesity_var = "obesity_lev")
eda_categorical(dataset, "caloric_food", gender_var = "gender", obesity_var = "obesity_lev")
num_high_caloric_consumers <- sum(dataset$caloric_food == "yes")
total_participants <- nrow(dataset)
percentage_high_caloric_consumers <- (num_high_caloric_consumers / total_participants) * 100
percentage_high_caloric_consumers
eda_categorical(dataset, "freq_alcohol", gender_var = "gender", obesity_var = "obesity_lev")
# Prepare the data summary for 'Sometimes' and 'No' responses
data_summary <- dataset %>%
filter(freq_alcohol %in% c("Sometimes", "No")) %>%
group_by(obesity_lev, freq_alcohol) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(obesity_lev) %>%
mutate(total = sum(count), proportion = count / total) %>%
ungroup()
# Check if data_summary has the expected columns
print(head(data_summary))
ggplot(data_summary, aes(x = obesity_lev, y = proportion, group = freq_alcohol, color = freq_alcohol)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
scale_y_continuous(labels = scales::percent) +
ggtitle("Proportion of 'Sometimes' and 'No' Responses for Alcohol Frequency by Obesity Level") +
labs(x = "Obesity Level", y = "Proportion", color = "Alcohol Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
eda_categorical(dataset, "calorie_check", gender_var = "gender", obesity_var = "obesity_lev")
data_summary <- dataset %>%
group_by(obesity_lev, calorie_check) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(total = sum(count), proportion = count / total)
ggplot(data_summary, aes(x = obesity_lev, y = proportion, group = calorie_check, color = calorie_check)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
scale_y_continuous(labels = scales::percent) +
scale_color_manual(values = c("no" = "lightcoral", "yes" = "lightblue")) +
labs(title = "Proportion of Calorie Checking by Obesity Level", x = "Obesity Level", y = "Proportion", color = "Calorie Check") +
theme_minimal()
dataset$vegetable_food <- round(dataset$vegetable_food)
ggplot(dataset, aes(x = factor(vegetable_food, levels = c(1, 2, 3),
labels = c("Rarely", "Sometimes", "Often")))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Vegetable Consumption Frequency", x = "Frequency of Vegetable Consumption", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5))
ggplot(dataset, aes(x = factor(round(nb_meal_day), levels = c(1, 2, 3, 4, 5),
labels = c("1 Meal", "2 Meals", "3 Meals", "4 Meals", "5+ Meals")))) +
geom_bar(fill = "orange", color = "black") +
labs(title = "Number of Meals per Day", x = "Meals per Day", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5))
correlation_meals_weight <- cor(dataset$nb_meal_day, dataset$weight, use = "complete.obs")
correlation_meals_weight
ggplot(dataset, aes(x = physical_act)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black", alpha = 0.6) +
geom_density(color = "darkblue", size = 1) +
ggtitle("Histogram and Density of Physical Activity") +
theme_minimal() +
labs(x = "Physical Activity", y = "Density")
ggplot(dataset, aes(x = obesity_lev, y = physical_act, fill = obesity_lev)) +  # Replace 'obesity_lev' with any category variable
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, color = "black", fill = "white") +
ggtitle("Violin Plot of Physical Activity by Obesity Level") +
theme_minimal() +
labs(x = "Obesity Level", y = "Physical Activity") +
theme(legend.position = "none")
ggplot(dataset, aes(x = age, y = physical_act)) +  # Replace 'age' with another continuous variable
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
ggtitle("Scatter Plot of Physical Activity vs Age") +
theme_minimal() +
labs(x = "Age", y = "Physical Activity")
ggplot(dataset, aes(x = ch2o)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black", alpha = 0.6) +
geom_density(color = "darkblue", size = 1) +
ggtitle("Histogram and Density of Comsumption of Water") +
theme_minimal() +
labs(x = "CH2O", y = "Density")
ggplot(dataset, aes(x = ch2o, fill = gender)) +
geom_histogram(bins = 20, alpha = 0.6, position = "dodge") +
facet_wrap(~ obesity_lev) +
ggtitle("Histogram of CH2O by Obesity Level and Gender") +
theme_minimal() +
labs(x = "CH2O", y = "Count", fill = "Gender")
ggplot(dataset, aes(x = age, y = ch2o)) +
geom_point(alpha = 0.5, color = "darkblue") +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
ggtitle("Scatter Plot of CH2O vs Age with Trendline") +
theme_minimal() +
labs(x = "Age", y = "CH2O")
ggplot(dataset, aes(x = gender, y = ch2o, fill = gender)) +
geom_violin(trim = FALSE, alpha = 0.7) +
ggtitle("Violin Plot of CH2O by Gender") +
theme_minimal() +
labs(x = "Gender", y = "CH2O") +
theme(legend.position = "none")
ggplot(dataset, aes(x = use_tech)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
geom_density(color = "blue", size = 1) +
labs(title = "Histogram and Density of Use of Technology", x = "Use of Technology", y = "Density") +
theme_minimal()
ggplot(dataset, aes(x = use_tech, fill = obesity_lev)) +
geom_density(alpha = 0.5) +
labs(title = "Density of Use of Technology by Obesity Level", x = "Use of Technology", y = "Density") +
theme_minimal()
ggplot(dataset, aes(x = obesity_lev, y = use_tech, fill = obesity_lev)) +
geom_boxplot() +
labs(title = "Boxplot of Use of Technology by Obesity Level", x = "Obesity Level", y = "Use of Technology") +
theme_minimal() +
theme(legend.position = "none")
ggplot(dataset, aes(x = age, y = use_tech)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
labs(title = "Scatter Plot of Use of Technology vs Age", x = "Age", y = "Use of Technology") +
theme_minimal()
#| label: setup
#| echo: false
#| message: false
# loading all the necessary packages
source(here::here("src", "setup.R"))
#| label: setup
#| echo: false
#| message: false
# loading all the necessary packages
source(here::here("src", "setup.R"))
# ggplot options for the report
ggplot2::theme_set(theme_light())
##########################################################
## The following uses renv to help with reproducibility ##
##########################################################
# Uncomment the codes in this section if you would like to use it with your
# Check if renv is installed and load it
# if (!require("renv", character.only = TRUE)) {
#   install.packages("renv")
#   library("renv", character.only = TRUE)
# }
# Initialize renv and restore packages from the lockfile
# renv::init()
# renv::restore()
#############################################
## The following loads the needed packages ##
#############################################
# load your virtual environment for the project
# load the required packages
packages <- c(
"here", # for the project's organization
"readr","dplyr","tidyr","ggplot2","corrplot","ggridges","cluster","reshape2",
"tidyverse", "lubridate","knitr", # for wrangling
"patchwork", "maps", "scales", # for plotting
"knitr", "kableExtra", "rmarkdown" # for the report
# "reticulate", # for using python
)
# Install missing packages and load all the required libraries
load_packages <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
try(install.packages(pkg))
}
require(pkg, character.only = TRUE)
}
# Load all packages
invisible(sapply(packages, load_packages))
########################################
## The following sets the python path ##
########################################
# reticulate::use_condaenv("NAME_OF_YOUR_ENVIRONMENT")
######################################################
## The following sets a few option for nice reports ##
######################################################
# You can use this if you wanted to change the rendered output
# general options
# options(
#   digits = 3,
#   str = strOptions(strict.width = "cut"),
#   width = 69,
#   tibble.width = 69,
#   cli.unicode = FALSE
# )
# ggplot options for the report
ggplot2::theme_set(theme_light())
# knitr options
# opts_chunk$set(
#   comment = "#>",
#   collapse = TRUE,
#   # cache = TRUE,
#   fig.retina = 0.8, # figures are either vectors or 300 dpi diagrams
#   dpi = 300,
#   out.width = "70%",
#   fig.align = "center",
#   fig.width = 6,
#   fig.asp = 0.618,
#   fig.show = "hold",
#   message = FALSE,
#   echo = FALSE
# )
dataset_raw <- read.csv(here("data/raw/dataset_raw.csv"))

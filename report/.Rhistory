))
dataset_num <- dataset_num %>%
mutate(across(where(is.factor), ~ as.numeric(.)))
str_output <- capture.output(str(dataset_num))
table_num_str <- data.frame(Structure = str_output, stringsAsFactors = FALSE)
table_num_str %>%
kbl(format = "html", caption = "Structure of the Numerical Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
nb_na<- colSums(is.na(dataset_num))
nb_na %>%
kbl(format = "html", caption = "Presence of Potential NA Values in the Dataset") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "left"
) %>%
column_spec(1, width = "100px") %>%
column_spec(2, width = "80px") %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
missing_values <- colSums(is.na(dataset))
missing_values %>%
kbl(format = "html", caption = "Missing Values in Each Column") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width=FALSE, position = "center") %>%
column_spec(1, width = "100px") %>%
column_spec(2, width = "80px") %>%
row_spec(0, bold = TRUE, background = "#f0f0f0") %>%
scroll_box(width = "100%", height = "400px")
duplicated_rows <- sum(duplicated(dataset))
duplicated_rows
dataset <- dataset %>%
distinct()
nrow(dataset)
any(duplicated(dataset))
g1 <- ggplot(dataset, aes(x = obesity_lev)) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(
title = "Class Distribution of Obesity Levels",
x = "Obesity Level",
y = "Count"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #Adjusted the text for clarity
plotly_plot <- ggplotly(g1)
plotly_plot
g2 <- ggplot(dataset, aes(x = age, fill = obesity_lev)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(
title = "Age Distribution by Obesity Levels",
x = "Age",
y = "Density",
fill = "Obesity Level") +
xlim(14, 50)
plotly_plot1 <- ggplotly(g2)
plotly_plot1
dataset_stat <- dataset %>%
group_by(obesity_lev) %>%
summarize(
Age_Mean = mean(age, na.rm = TRUE),
Age_SD = sd(age, na.rm = TRUE),
Height_Mean = mean(height, na.rm = TRUE),
Height_SD = sd(height, na.rm = TRUE),
Weight_Mean = mean(weight, na.rm = TRUE),
Weight_SD = sd(weight, na.rm = TRUE)
)
dataset_stat %>%
kbl(format = "html", caption = "Summary Statistics by Obesity Level", digits = 1) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
library(cluster)
set.seed(123)
kmeans_res <- kmeans(select(dataset, where(is.numeric)), centers = length(unique(dataset$obesity_lev)))
silhouette_score <- silhouette(kmeans_res$cluster, dist(select(dataset, where(is.numeric))))
mean_silhouette_score <- mean(silhouette_score[, "sil_width"])
mean_silhouette_score
#Assuming dataset_num is already defined and contains the relevant columns
cor_matrix <- cor(dataset_num %>% select("physical_act", "freq_alcohol", "obesity_lev", "age", "weight","height", "family_hist", "caloric_food", "vegetable_food", "food_btw_meals", "use_tech", "ch2o", "m_trans", "smoke","nb_meal_day", "calorie_check", "gender"),use = "complete.obs")
#Extract the correlations with 'obesity_lev'
cor_with_obesity_lev <- cor_matrix["obesity_lev",]
#Order variables by their correlation with 'obesity_lev'
ordered_vars <- names(sort(cor_with_obesity_lev, decreasing = TRUE))
#Reorder the correlation matrix based on this order
cor_matrix_ordered <- cor_matrix[ordered_vars, ordered_vars]
#Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
g3 <- ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5, hjust = 0.5) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, vjust = 1))
plot3 <- ggplotly(g3)
plot3
# Create the heatmap with correlation values
# Assuming dataset_num is already defined and contains the relevant columns
cor_matrix <- cor(dataset_num %>% select("physical_act", "freq_alcohol", "obesity_lev", "age", "weight", "family_hist", "caloric_food", "vegetable_food", "food_btw_meals", "use_tech","ch2o", "height", "calorie_check", "gender"), use = "complete.obs")
# Extract the correlations with "obesity_lev"
cor_with_obesity_lev <- cor_matrix["obesity_lev",]
# Order variables by their correlation with 'obesity_lev'
ordered_vars <- names(sort(cor_with_obesity_lev, decreasing = TRUE))
# Reorder the correlation matrix based on this order
cor_matrix_ordered <- cor_matrix[ordered_vars, ordered_vars]
# Melt the ordered correlation matrix into long format
cor_long <- melt(cor_matrix_ordered)
g4 <- ggplot(cor_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 2.5, vjust = 0.5
, hjust = 0.5) + # Center text within tiles
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Heatmap Ordered by Obesity Level", x = "Variables", y
= "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, vjust = 1)
)
plot4 <- ggplotly(g4)
plot4
age_summary <- summary(dataset$age)
age_sd <- sd(dataset$age, na.rm = TRUE)
sum_age_df <- tibble::tibble(
Metric = c(names(age_summary), "Standard Deviation"),
Value = round(c(age_summary, age_sd), 2)
)
kable(sum_age_df, format = "markdown", caption = "Age Variable Statistics")
g5 <- ggplot(dataset, aes(x = obesity_lev, y = age, fill = obesity_lev)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, color = "black", fill = "white") +
labs(title = "Age Distribution by Obesity Level", x = "Obesity Level", y = "Age") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot5 <- ggplotly(g5)
plot5
g6 <- ggplot(dataset, aes(x = age, y = as.numeric(obesity_lev))) +
geom_jitter(alpha = 0.3) +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(title = "Trend of Obesity Level with Age", x = "Age", y = "Obesity Level") +
theme_minimal()
plot6 <- ggplotly(g6)
plot6
height_summary <- summary(dataset$height)
height_sd <- sd(dataset$height, na.rm = TRUE)
sum_height_df <- tibble::tibble(
Metric = c(names(height_summary), "Standard Deviation"),
Value = round(c(height_summary, height_sd), 2)
)
kable(sum_height_df, format = "markdown", caption = "Height Variable Statistics")
g7 <- ggplot(dataset, aes(x = height)) +
geom_histogram(bins = 20, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Height Distribution", x = "Height (m)", y = "Count") +
theme_minimal()
plot7 <- ggplotly(g7)
plot7
g8 <- ggplot(dataset, aes(x = obesity_lev, y = height, fill = obesity_lev)) +
geom_violin(alpha = 0.6) +
labs(title = "Height Distribution by Obesity Level", x = "Obesity Level", y = "Height") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
plot8 <- ggplotly(g8)
plot8
g9 <- ggplot(dataset, aes(x = weight, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Weight by Gender", x = "Weight", y = "Density") +
scale_fill_manual(values = c("pink", "lightblue"), name = "Gender", labels = c("Female", "Male")) +
theme_minimal()
plot9 <- ggplotly(g9)
plot9
ggplot(dataset, aes(x = weight, y = obesity_lev, fill = obesity_lev)) +
geom_density_ridges(scale = 0.9, alpha = 0.6) +
labs(title = "Ridgeline Plot of Weight by Obesity Level", x = "Weight", y = "Obesity Level") +
theme_minimal() +
theme(legend.position = "none")
g11 <- ggplot(dataset, aes(x = height, y = weight, color = obesity_lev)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, aes(group = obesity_lev)) +  # Adds a trend line for each obesity level
ggtitle("Scatter Plot of Weight vs Height by Obesity Level") +
theme_minimal() +
labs(x = "Height", y = "Weight", color = "Obesity Level")
plot11 <- ggplotly(g11)
plot11
g12 <- ggplot(dataset, aes(x = height, y = weight)) +
geom_point(alpha = 0.7, aes(color = obesity_lev)) +
facet_wrap(~ obesity_lev) +
ggtitle("Facet Grid of Weight and Height by Obesity Level") +
theme_minimal() +
labs(x = "Height", y = "Weight", color = "Obesity Level") +
theme(legend.position = "none")
plot12 <- ggplotly(g12)
plot12
correlation_height_weight <- cor(dataset$height, dataset$weight, use = "complete.obs")
correlation_height_weight
g13 <- ggplot(dataset, aes(x = food_btw_meals, fill = obesity_lev)) +
geom_bar(position = "dodge", color = "black") +
ggtitle("Dodged Bar Chart for Food Between Meals by Obesity Levels") +
labs(x = "Food Between Meals", y = "Count", fill = "Obesity Levels") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14))
plot13 <- ggplotly(g13)
plot13
g14 <- ggplot(dataset, aes(x = obesity_lev, fill = food_btw_meals)) +
geom_bar(position = "fill") + # Stacked bar chart with proportions
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + # Format y-axis as percentages
ggtitle("Proportion of Food Between Meals Across Obesity Levels") + # Shortened and clear title
labs(x = "Obesity Levels", y = "Proportion (%)", fill = "Food Between Meals") + # Correct axis and legend labels
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis text for readability
plot.title = element_text(hjust = 0.5, size = 14) # Center and style the title
)
plot14 <- ggplotly(g14)
plot14
g16 <- ggplot(dataset, aes(x = obesity_lev, fill = caloric_food)) +
geom_bar(
position = "dodge",
color = "black"
) +
ggtitle("Grouped Bar Chart of High-Caloric Food Consumption Across Obesity Levels") +
labs(x = "Obesity Levels", y = "Count", fill = "High-Caloric Food Consumption") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 14)
)
plot16 <- ggplotly(g16)
plot16
percentage_high_caloric_consumers <- mean(dataset$caloric_food == "yes") * 100
percentage_high_caloric_consumers
# Filter out "Always" responses from the dataset
filtered_dataset <- dataset %>%
filter(freq_alcohol != "Always")
g17 <- ggplot(filtered_dataset, aes(x = freq_alcohol, fill = obesity_lev)) +
geom_bar(position = "dodge", color = "black") +
ggtitle("Dodged Bar Chart for Alcohol Consumption by Obesity Levels") +
labs(x = "Alcohol Consumption Frequency", y = "Count", fill = "Obesity Levels") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14)) # Center and style the title
plot17 <- ggplotly(g17)
plot17
# Prepare the data summary for 'Sometimes' and 'No' responses
data_summary <- dataset %>%
filter(freq_alcohol %in% c("Sometimes", "No")) %>%
group_by(obesity_lev, freq_alcohol) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(obesity_lev) %>%
mutate(
total = sum(count),
proportion = count / total
) %>%
ungroup()
# Visualization with updated title
g18 <- ggplot(data_summary, aes(x = obesity_lev, y = proportion, group = freq_alcohol, color = freq_alcohol)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # Format y-axis as percentages
ggtitle("Proportion of 'Sometimes' and 'No' Alcohol Responses by Obesity Level") +
labs(x = "Obesity Level", y = "Proportion (%)", color = "Alcohol Frequency") +
scale_color_manual(values = c("No" = "purple", "Sometimes" = "gold")) + # Improved color scheme
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 14),  # Center and style title
legend.position = "top"
)
plot18 <- ggplotly(g18)
plot18
# Dodged Bar Chart for calorie_check by Obesity Levels
g19 <- ggplot(dataset, aes(x = calorie_check, fill = obesity_lev)) +
geom_bar(position = "dodge", color = "black") +
ggtitle("    Dodged Bar Chart for the check of the calories by Obesity Levels") +
labs(x = "Check of calories", y = "Count", fill = "Obesity Levels") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14)) # Center and style the title
plot19 <- ggplotly(g19)
plot19
data_summary <- dataset %>%
group_by(obesity_lev, calorie_check) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(total = sum(count), proportion = count / total)
# Proportion of Calorie Checking by Obesity Level
g20 <- ggplot(data_summary, aes(x = obesity_lev, y = proportion, group = calorie_check, color = calorie_check)) +
geom_line(linewidth = 1.2) +
geom_point(size = 3) +
scale_y_continuous(labels = scales::percent) +
scale_color_manual(values = c("no" = "lightcoral", "yes" = "lightblue")) +
labs(title = "Proportion of Calorie Checking by Obesity Level", x = "Obesity Level", y = "Proportion", color = "Calorie Check") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
plot20 <- ggplotly(g20)
plot20
g21 <- ggplot(dataset, aes(x = vegetable_food)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightgreen", color = "black", alpha = 0.6) +
geom_density(color = "darkgreen", linewidth = 1) +
ggtitle("Histogram and Density of Vegetable Food Consumption") +
theme_minimal() +
labs(x = "Vegetable Food Consumption", y = "Density")
plot21 <- ggplotly(g21)
plot21
g22 <- ggplot(dataset, aes(x = weight, y = vegetable_food, color = obesity_lev)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = "black") +
labs(title = "Scatterplot of Weight vs Vegetable Food Consumption",
x = "Weight",
y = "Vegetable Food Consumption") +
theme_minimal() +
coord_cartesian(xlim= c(40, 135), ylim= c(2, 3))
plot22 <- ggplotly(g22)
plot22
g23 <- ggplot(dataset, aes(x = obesity_lev, y = physical_act, fill = obesity_lev)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, color = "black", fill = "white") +
ggtitle("Violin Plot of Physical Activity by Obesity Level") +
labs(x = "Obesity Level", y = "Physical Activity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot23 <- ggplotly(g23)
plot23
# Calculate the average physical activity per obesity level
average_activity <- dataset %>%
group_by(obesity_lev) %>%
summarise(mean_activity = mean(physical_act))
# Plot the average physical activity
g24 <- ggplot(average_activity, aes(x = obesity_lev, y = mean_activity, group = 1)) +
geom_line(color = "blue", size = 1.2) +
geom_point(size = 3, color = "darkblue") +
ggtitle("Average Physical Activity Across Obesity Levels") +
labs(x = "Obesity Level", y = "Average Physical Activity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 14))
plot24 <- ggplotly(g24)
plot24
g25 <- ggplot(dataset, aes(x = ch2o)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black", alpha = 0.6) +
geom_density(color = "darkblue", size = 1) +
ggtitle("Histogram and Density of Comsumption of Water") +
theme_minimal() +
labs(x = "CH2O", y = "Density")
plot25 <- ggplotly(g25)
plot25
g26 <- ggplot(dataset, aes(x = weight, y = ch2o)) +
geom_point(alpha = 0.5, color = "lightgray") +  # Scatterplot in the background with reduced opacity
geom_smooth(method = "loess", se = FALSE, color = "blue", linewidth = 1.2) +  # Trend line in the foreground
labs(title = "Scatterplot with Trend Line: Water Consumption vs Weight",
x = "Weight", y = "Water Consumption (ch2o)") +
theme_minimal()
plot26 <- ggplotly(g26)
plot26
g28 <- ggplot(dataset, aes(x = use_tech, fill = obesity_lev)) +
geom_density(alpha = 0.5) +
labs(title = "Density of Use of Technology by Obesity Level", x = "Use of Technology", y = "Density") +
theme_minimal()
plot28 <- ggplotly(g28)
plot28
dataset <- read.csv(here("data/processed/dataset.csv"))
dataset$BMI <- dataset$weight / (dataset$height^2)
head(dataset$BMI) %>%
tibble::enframe(name = "Row", value = "BMI") %>%
kable(format = "html", caption = "First 6 BMI Values") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5")
summary_BMI <- summary(dataset$BMI)
summary_BMI %>%
tibble::enframe(name = "Statistic", value = "Value") %>%
kable(format = "html", caption = "Summary Statistics for BMI") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5")
dataset$Obesity <- ifelse(dataset$BMI >= 30, 1, 0)
dataset$Obesity <- as.factor(dataset$Obesity)
table(dataset$Obesity) %>%
as.data.frame() %>%
kable(format = "html", caption = "Frequency: obesity categories") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5")
head(dataset) %>%
kable(format = "html", caption = "First 6 Rows of Updated Dataset") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
predictors <- c("family_hist", "caloric_food", "vegetable_food", "nb_meal_day", "food_btw_meals", "smoke", "ch2o", "calorie_check", "physical_act", "use_tech", "freq_alcohol", "m_trans")
model_data <- dataset[, c("Obesity", predictors)]
str_output <- capture.output(str(model_data))
str_table <- data.frame(Structure = str_output, stringsAsFactors = FALSE)
str_table %>%
kable(format = "html", caption = "Structure of Model Data") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
head(model_data) %>%
kable(format = "html", caption = "First 6 Rows of Model Data") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
full_model <- glm(Obesity ~ ., data = model_data, family = binomial)
null_model <- glm(Obesity ~ 1, data = model_data, family = binomial)
stepwise_model <- step(null_model, scope = list(lower = null_model, upper = full_model), direction = "both", trace = FALSE)
null_model_summary <- summary(null_model)
null_model_coef_table <- coef(null_model_summary) %>%
as.data.frame() %>%
tibble::rownames_to_column("Predictor")
null_model_coef_table %>%
kable(format = "html", caption = "Coefficients of the Null Logistic Regression Model") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
coef_table <- coef(summary(full_model)) %>%
as.data.frame() %>%
tibble::rownames_to_column("Predictor")
coef_table %>%
kable(format = "html", caption = "Coefficients of the Full Logistic Regression Model") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
stepwise_summary <- summary(stepwise_model)
stepwise_coef_table <- coef(stepwise_summary) %>%
as.data.frame() %>%
tibble::rownames_to_column("Predictor")
stepwise_coef_table %>%
kable(format = "html", caption = "Coefficients of the Stepwise Logistic Regression Model") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
library(caret)
library(pROC)
# Predict probabilities from the stepwise model
predicted_probs <- predict(stepwise_model, type = "response")
# Convert probabilities to binary classes (using a threshold of 0.5)
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
# Create a confusion matrix (comparison of predicted vs. actual values)
conf_matrix <- confusionMatrix(as.factor(predicted_classes), model_data$Obesity)
conf_matrix_table <- as.data.frame(conf_matrix$table)
colnames(conf_matrix_table) <- c("Actual", "Predicted", "Count")
conf_matrix_table <- conf_matrix_table %>%
group_by(Actual) %>%
mutate(Percentage = round((Count / sum(Count)) * 100, 2)) %>%
ungroup()
conf_matrix_table %>%
kable(format = "html", caption = "Confusion Matrix: Predicted vs Actual Values with Percentages") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
column_spec(1, bold = TRUE, width = "150px") %>%
column_spec(2, width = "150px") %>%
column_spec(3, width = "100px") %>%
column_spec(4, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
performance_metrics_vertical <- as.data.frame(conf_matrix$overall) %>%
tibble::rownames_to_column("Metric") %>%
tidyr::pivot_longer(cols = -Metric, names_to = NULL, values_to = "Value")
performance_metrics_vertical %>%
kable(format = "html", caption = "Confusion Matrix Overall Performance Metrics") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
class_metrics_vertical <- as.data.frame(conf_matrix$byClass) %>%
tibble::rownames_to_column("Metric") %>%
tidyr::pivot_longer(cols = -Metric, names_to = NULL, values_to = "Value")
class_metrics_vertical %>%
kable(format = "html", caption = "Class-Level Performance Metrics") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#f5f5f5") %>%
scroll_box(width = "100%", height = "400px")
# Compute ROC curve using the actual class labels and predicted probabilities
roc_curve <- pROC::roc(model_data$Obesity, predicted_probs)
auc_value <- pROC::auc(roc_curve)
print(auc_value)
plot(predicted_probs, col = ifelse(model_data$Obesity == 1, "blue", "red"), pch = 16, xlab = "n° Observation", ylab = "Predicted Probability", main = "Predicted Probabilities of Obesity", cex = 0.6)
legend("bottomright", legend = c("Obese", "Not Obese"), col = c("blue", "red"), pch = 16)
plot(roc_curve, col = "blue", main = "ROC Curve", lwd = 3, xlim = c(0, 1), ylim = c(0, 1.05), xlab = "False Positive Rate", ylab = "True Positive Rate", cex.main = 1.5, cex.lab = 1.2, cex.axis = 1.1)
legend("topright", legend = paste("AUC =", round(auc_value, 3)), lwd = 0, cex = 1.2, bty = "n")
grid()
new_data <- data.frame(
family_hist = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
caloric_food = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
vegetable_food = c(1, 5, 2, 4, 1, 3),
nb_meal_day = c(5, 1, 3, 2, 4, 2),
food_btw_meals = factor(c("Frequently", "Sometimes", "Always", "Sometimes", "Frequently", "Always"),
levels = c("Frequently", "Sometimes", "Always")),
smoke = factor(c("no", "yes", "no", "yes", "yes", "no"),
levels = c("yes", "no")),
ch2o = c(0.5, 4, 1, 3, 2, 1.5),
calorie_check = factor(c("yes", "no", "yes", "no", "yes", "no"),
levels = c("yes", "no")),
physical_act = c(0, 5, 1, 3, 0, 4),
use_tech = c(10, 0.5, 8, 1, 6, 2),
freq_alcohol = factor(c("Always", "Never", "Sometimes", "Always", "Sometimes", "Never"),
levels = c("Sometimes", "Frequently", "Always", "Never")),
m_trans = factor(c("Public_Transportation", "Walking", "Motorbike", "Bike", "Public_Transportation", "Motorbike"),
levels = c("Public_Transportation", "Walking", "Bike", "Motorbike"))
)
predicted_probs_new <- predict(stepwise_model, new_data, type = "response")
probability_table <- tibble(
Reference = 1:length(predicted_probs_new),
Predicted_Probability = predicted_probs_new,
Probability_Percentage = predicted_probs_new * 100
)
probability_table %>%
kbl(format = "html", caption = "Predicted Probabilities") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
column_spec(1, width = "100px") %>%
scroll_box(width = "100%", height = "400px")
